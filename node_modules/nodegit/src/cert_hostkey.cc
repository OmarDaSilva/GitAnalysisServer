// This is a generated file, modify: generate/templates/templates/class_content.cc

#include <nan.h>
#include <string.h>

extern "C" {
  #include <git2.h>
 }

#include "../include/nodegit.h"
#include "../include/lock_master.h"
#include "../include/functions/copy.h"
#include "../include/cert_hostkey.h"
#include "nodegit_wrapper.cc"

  #include "../include/cert.h"
 
#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

  GitCertHostkey::~GitCertHostkey() {
    // this will cause an error if you have a non-self-freeing object that also needs
    // to save values. Since the object that will eventually free the object has no
    // way of knowing to free these values.
   }

  void GitCertHostkey::InitializeComponent(v8::Local<v8::Object> target, nodegit::Context *nodegitContext) {
    Nan::HandleScope scope;

    v8::Local<v8::External> nodegitExternal = Nan::New<v8::External>(nodegitContext);
    v8::Local<FunctionTemplate> tpl = Nan::New<FunctionTemplate>(JSNewFunction, nodegitExternal);

    tpl->InstanceTemplate()->SetInternalFieldCount(1);
    tpl->SetClassName(Nan::New("CertHostkey").ToLocalChecked());

         Nan::SetPrototypeMethod(tpl, "parent", Parent, nodegitExternal);
         Nan::SetPrototypeMethod(tpl, "type", Type, nodegitExternal);
         Nan::SetPrototypeMethod(tpl, "hashMd5", HashMd5, nodegitExternal);
         Nan::SetPrototypeMethod(tpl, "hashSha1", HashSha1, nodegitExternal);
         Nan::SetPrototypeMethod(tpl, "hashSha256", HashSha256, nodegitExternal);
         Nan::SetPrototypeMethod(tpl, "rawType", RawType, nodegitExternal);
         Nan::SetPrototypeMethod(tpl, "hostkey", Hostkey, nodegitExternal);
         Nan::SetPrototypeMethod(tpl, "hostkeyLen", HostkeyLen, nodegitExternal);
  
    InitializeTemplate(tpl);

    v8::Local<Function> constructor_template = Nan::GetFunction(tpl).ToLocalChecked();
    nodegitContext->SaveToPersistent("GitCertHostkey::Template", constructor_template);
    Nan::Set(target, Nan::New("CertHostkey").ToLocalChecked(), constructor_template);
  }

      // start field block
    NAN_METHOD(GitCertHostkey::Parent) {
      v8::Local<v8::Value> v8ConversionSlot;

            git_cert
*            parent =
          &
           Nan::ObjectWrap::Unwrap<GitCertHostkey>(info.This())->GetValue()->parent;
 // start convert_to_v8 block
    if (parent != NULL) {
      v8::Local<v8::Array> owners = Nan::New<Array>(0);
         Nan::Set(owners, owners->Length(), info.This());
          v8ConversionSlot = GitCert::New(
        parent,
        false
          , owners
       );
   }
  else {
    v8ConversionSlot = Nan::Null();
  }
  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
     // start field block
    NAN_METHOD(GitCertHostkey::Type) {
      v8::Local<v8::Value> v8ConversionSlot;

            git_cert_ssh_t
           type =
          Nan::ObjectWrap::Unwrap<GitCertHostkey>(info.This())->GetValue()->type;
 // start convert_to_v8 block
     v8ConversionSlot = Nan::New<Number>( type);
  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
     // start field block
    NAN_METHOD(GitCertHostkey::HashMd5) {
      v8::Local<v8::Value> v8ConversionSlot;

      char* hash_md5 = (char *)Nan::ObjectWrap::Unwrap<GitCertHostkey>(info.This())->GetValue()->hash_md5;
 // start convert_to_v8 block
  if (hash_md5){
      v8ConversionSlot = Nan::New<v8::String>(hash_md5, 16).ToLocalChecked();
   }
  else {
    v8ConversionSlot = Nan::Null();
  }

  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
     // start field block
    NAN_METHOD(GitCertHostkey::HashSha1) {
      v8::Local<v8::Value> v8ConversionSlot;

      char* hash_sha1 = (char *)Nan::ObjectWrap::Unwrap<GitCertHostkey>(info.This())->GetValue()->hash_sha1;
 // start convert_to_v8 block
  if (hash_sha1){
      v8ConversionSlot = Nan::New<v8::String>(hash_sha1, 20).ToLocalChecked();
   }
  else {
    v8ConversionSlot = Nan::Null();
  }

  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
     // start field block
    NAN_METHOD(GitCertHostkey::HashSha256) {
      v8::Local<v8::Value> v8ConversionSlot;

      char* hash_sha256 = (char *)Nan::ObjectWrap::Unwrap<GitCertHostkey>(info.This())->GetValue()->hash_sha256;
 // start convert_to_v8 block
  if (hash_sha256){
      v8ConversionSlot = Nan::New<v8::String>(hash_sha256, 32).ToLocalChecked();
   }
  else {
    v8ConversionSlot = Nan::Null();
  }

  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
     // start field block
    NAN_METHOD(GitCertHostkey::RawType) {
      v8::Local<v8::Value> v8ConversionSlot;

            git_cert_ssh_raw_type_t
           raw_type =
          Nan::ObjectWrap::Unwrap<GitCertHostkey>(info.This())->GetValue()->raw_type;
 // start convert_to_v8 block
     v8ConversionSlot = Nan::New<Number>( raw_type);
  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
     // start field block
    NAN_METHOD(GitCertHostkey::Hostkey) {
      v8::Local<v8::Value> v8ConversionSlot;

            const char *
           hostkey =
          Nan::ObjectWrap::Unwrap<GitCertHostkey>(info.This())->GetValue()->hostkey;
 // start convert_to_v8 block
  if (hostkey){
       v8ConversionSlot = Nan::New<v8::String>(hostkey).ToLocalChecked();
   }
  else {
    v8ConversionSlot = Nan::Null();
  }

  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
     // start field block
    NAN_METHOD(GitCertHostkey::HostkeyLen) {
      v8::Local<v8::Value> v8ConversionSlot;

            size_t
           hostkey_len =
          Nan::ObjectWrap::Unwrap<GitCertHostkey>(info.This())->GetValue()->hostkey_len;
 // start convert_to_v8 block
     v8ConversionSlot = Nan::New<Number>( hostkey_len);
  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
  // force base class template instantiation, to make sure we get all the
// methods, statics, etc.
template class NodeGitWrapper<GitCertHostkeyTraits>;
 