// This is a generated file, modify: generate/templates/templates/struct_content.cc

// generated from struct_content.cc
#include <nan.h>
#include <string.h>
#ifdef WIN32
#include <windows.h>
#else
#include <unistd.h>
#endif // win32

extern "C" {
  #include <git2.h>
 }

#include <iostream>
#include "../include/nodegit.h"
#include "../include/lock_master.h"
#include "../include/functions/copy.h"
#include "../include/worktree_add_options.h"
#include "nodegit_wrapper.cc"

 
using namespace v8;
using namespace node;
using namespace std;

 
ConfigurableGitWorktreeAddOptions::ConfigurableGitWorktreeAddOptions(nodegit::Context *nodegitContext)
  : nodegit::ConfigurableClassWrapper<GitWorktreeAddOptionsTraits>(nodegitContext)
{
     git_worktree_add_options  wrappedValue = GIT_WORKTREE_ADD_OPTIONS_INIT;
    this->raw = (git_worktree_add_options*) malloc(sizeof(git_worktree_add_options ));
    memcpy(this->raw, &wrappedValue, sizeof(git_worktree_add_options ));
 }

ConfigurableGitWorktreeAddOptions::~ConfigurableGitWorktreeAddOptions() {
     }

nodegit::ConfigurableClassWrapper<GitWorktreeAddOptionsTraits>::v8ConversionResult ConfigurableGitWorktreeAddOptions::fromJavascript(nodegit::Context *nodegitContext, v8::Local<v8::Value> input) {
  if (!input->IsObject()) {
    return {
      "Must pass object for ConfigurableGitWorktreeAddOptions"
    };
  }

  Nan::HandleScope scope;
  v8::Local<v8::Object> inputObj = input.As<v8::Object>();
  std::shared_ptr<ConfigurableGitWorktreeAddOptions> output(new ConfigurableGitWorktreeAddOptions(nodegitContext));

  // unpack the data into the correct fields
         {
          v8::Local<v8::Value> maybeNumber = nodegit::safeGetField(inputObj, "version");
          if (!maybeNumber.IsEmpty() && !maybeNumber->IsUndefined() && !maybeNumber->IsNull()) {
            if (!maybeNumber->IsNumber()) {
              return {
                "Must pass Int32 to version"
              };
            }

            output->raw->version = static_cast<unsigned int>(maybeNumber->Int32Value(Nan::GetCurrentContext()).FromJust());
          }
        }
           {
          v8::Local<v8::Value> maybeNumber = nodegit::safeGetField(inputObj, "lock");
          if (!maybeNumber.IsEmpty() && !maybeNumber->IsUndefined() && !maybeNumber->IsNull()) {
            if (!maybeNumber->IsNumber()) {
              return {
                "Must pass Int32 to lock"
              };
            }

            output->raw->lock = static_cast<int>(maybeNumber->Int32Value(Nan::GetCurrentContext()).FromJust());
          }
        }
    
  return {
    output
  };
}

     
// force base class template instantiation, to make sure we get all the
// methods, statics, etc.
template class nodegit::ConfigurableClassWrapper<GitWorktreeAddOptionsTraits>;
