// This is a generated file, modify: generate/templates/templates/struct_content.cc

// generated from struct_content.cc
#include <nan.h>
#include <string.h>
#ifdef WIN32
#include <windows.h>
#else
#include <unistd.h>
#endif // win32

extern "C" {
  #include <git2.h>
 }

#include <iostream>
#include "../include/nodegit.h"
#include "../include/lock_master.h"
#include "../include/functions/copy.h"
#include "../include/describe_format_options.h"
#include "nodegit_wrapper.cc"

 
using namespace v8;
using namespace node;
using namespace std;

 
ConfigurableGitDescribeFormatOptions::ConfigurableGitDescribeFormatOptions(nodegit::Context *nodegitContext)
  : nodegit::ConfigurableClassWrapper<GitDescribeFormatOptionsTraits>(nodegitContext)
{
     git_describe_format_options  wrappedValue = GIT_DESCRIBE_FORMAT_OPTIONS_INIT;
    this->raw = (git_describe_format_options*) malloc(sizeof(git_describe_format_options ));
    memcpy(this->raw, &wrappedValue, sizeof(git_describe_format_options ));
 }

ConfigurableGitDescribeFormatOptions::~ConfigurableGitDescribeFormatOptions() {
              delete this->raw->dirty_suffix;
   }

nodegit::ConfigurableClassWrapper<GitDescribeFormatOptionsTraits>::v8ConversionResult ConfigurableGitDescribeFormatOptions::fromJavascript(nodegit::Context *nodegitContext, v8::Local<v8::Value> input) {
  if (!input->IsObject()) {
    return {
      "Must pass object for ConfigurableGitDescribeFormatOptions"
    };
  }

  Nan::HandleScope scope;
  v8::Local<v8::Object> inputObj = input.As<v8::Object>();
  std::shared_ptr<ConfigurableGitDescribeFormatOptions> output(new ConfigurableGitDescribeFormatOptions(nodegitContext));

  // unpack the data into the correct fields
         {
          v8::Local<v8::Value> maybeNumber = nodegit::safeGetField(inputObj, "version");
          if (!maybeNumber.IsEmpty() && !maybeNumber->IsUndefined() && !maybeNumber->IsNull()) {
            if (!maybeNumber->IsNumber()) {
              return {
                "Must pass Int32 to version"
              };
            }

            output->raw->version = static_cast<unsigned int>(maybeNumber->Int32Value(Nan::GetCurrentContext()).FromJust());
          }
        }
           {
          v8::Local<v8::Value> maybeNumber = nodegit::safeGetField(inputObj, "abbreviatedSize");
          if (!maybeNumber.IsEmpty() && !maybeNumber->IsUndefined() && !maybeNumber->IsNull()) {
            if (!maybeNumber->IsNumber()) {
              return {
                "Must pass Int32 to abbreviatedSize"
              };
            }

            output->raw->abbreviated_size = static_cast<unsigned int>(maybeNumber->Int32Value(Nan::GetCurrentContext()).FromJust());
          }
        }
           {
          v8::Local<v8::Value> maybeNumber = nodegit::safeGetField(inputObj, "alwaysUseLongFormat");
          if (!maybeNumber.IsEmpty() && !maybeNumber->IsUndefined() && !maybeNumber->IsNull()) {
            if (!maybeNumber->IsNumber()) {
              return {
                "Must pass Int32 to alwaysUseLongFormat"
              };
            }

            output->raw->always_use_long_format = static_cast<int>(maybeNumber->Int32Value(Nan::GetCurrentContext()).FromJust());
          }
        }
          output->raw->dirty_suffix = nullptr;
        {
          v8::Local<v8::Value> maybeString = nodegit::safeGetField(inputObj, "dirtySuffix");
          if (!maybeString.IsEmpty() && !maybeString->IsUndefined() && !maybeString->IsNull()) {
            if (!maybeString->IsString()) {
              return {
                "Must pass string to dirtySuffix"
              };
            }

            Nan::Utf8String utf8String(maybeString.As<v8::String>());
            output->raw->dirty_suffix = strdup(*utf8String);
          }
        }
    
  return {
    output
  };
}

         
// force base class template instantiation, to make sure we get all the
// methods, statics, etc.
template class nodegit::ConfigurableClassWrapper<GitDescribeFormatOptionsTraits>;
