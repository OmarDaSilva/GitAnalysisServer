// This is a generated file, modify: generate/templates/templates/class_content.cc

#include <nan.h>
#include <string.h>

extern "C" {
  #include <git2.h>
 }

#include "../include/nodegit.h"
#include "../include/lock_master.h"
#include "../include/functions/copy.h"
#include "../include/rebase_operation.h"
#include "nodegit_wrapper.cc"

  #include "../include/oid.h"
 
#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

  GitRebaseOperation::~GitRebaseOperation() {
    // this will cause an error if you have a non-self-freeing object that also needs
    // to save values. Since the object that will eventually free the object has no
    // way of knowing to free these values.
   }

  void GitRebaseOperation::InitializeComponent(v8::Local<v8::Object> target, nodegit::Context *nodegitContext) {
    Nan::HandleScope scope;

    v8::Local<v8::External> nodegitExternal = Nan::New<v8::External>(nodegitContext);
    v8::Local<FunctionTemplate> tpl = Nan::New<FunctionTemplate>(JSNewFunction, nodegitExternal);

    tpl->InstanceTemplate()->SetInternalFieldCount(1);
    tpl->SetClassName(Nan::New("RebaseOperation").ToLocalChecked());

         Nan::SetPrototypeMethod(tpl, "type", Type, nodegitExternal);
         Nan::SetPrototypeMethod(tpl, "id", Id, nodegitExternal);
         Nan::SetPrototypeMethod(tpl, "exec", Exec, nodegitExternal);
  
    InitializeTemplate(tpl);

    v8::Local<Function> constructor_template = Nan::GetFunction(tpl).ToLocalChecked();
    nodegitContext->SaveToPersistent("GitRebaseOperation::Template", constructor_template);
    Nan::Set(target, Nan::New("RebaseOperation").ToLocalChecked(), constructor_template);
  }

      // start field block
    NAN_METHOD(GitRebaseOperation::Type) {
      v8::Local<v8::Value> v8ConversionSlot;

            git_rebase_operation_t
           type =
          Nan::ObjectWrap::Unwrap<GitRebaseOperation>(info.This())->GetValue()->type;
 // start convert_to_v8 block
     v8ConversionSlot = Nan::New<Number>( type);
  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
     // start field block
    NAN_METHOD(GitRebaseOperation::Id) {
      v8::Local<v8::Value> v8ConversionSlot;

            const git_oid
*            id =
          &
           Nan::ObjectWrap::Unwrap<GitRebaseOperation>(info.This())->GetValue()->id;
 // start convert_to_v8 block
    if (id != NULL) {
      v8::Local<v8::Array> owners = Nan::New<Array>(0);
         Nan::Set(owners, owners->Length(), info.This());
          v8ConversionSlot = GitOid::New(
        id,
        true
          , owners
       );
   }
  else {
    v8ConversionSlot = Nan::Null();
  }
  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
     // start field block
    NAN_METHOD(GitRebaseOperation::Exec) {
      v8::Local<v8::Value> v8ConversionSlot;

            const char *
           exec =
          Nan::ObjectWrap::Unwrap<GitRebaseOperation>(info.This())->GetValue()->exec;
 // start convert_to_v8 block
  if (exec){
       v8ConversionSlot = Nan::New<v8::String>(exec).ToLocalChecked();
   }
  else {
    v8ConversionSlot = Nan::Null();
  }

  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
  // force base class template instantiation, to make sure we get all the
// methods, statics, etc.
template class NodeGitWrapper<GitRebaseOperationTraits>;
 