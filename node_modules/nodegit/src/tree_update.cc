// This is a generated file, modify: generate/templates/templates/struct_content.cc

// generated from struct_content.cc
#include <nan.h>
#include <string.h>
#ifdef WIN32
#include <windows.h>
#else
#include <unistd.h>
#endif // win32

extern "C" {
  #include <git2.h>
 }

#include <iostream>
#include "../include/nodegit.h"
#include "../include/lock_master.h"
#include "../include/functions/copy.h"
#include "../include/tree_update.h"
#include "nodegit_wrapper.cc"

  #include "../include/oid.h"
 
using namespace v8;
using namespace node;
using namespace std;

 
ConfigurableGitTreeUpdate::ConfigurableGitTreeUpdate(nodegit::Context *nodegitContext)
  : nodegit::ConfigurableClassWrapper<GitTreeUpdateTraits>(nodegitContext)
{
    this->raw = new git_tree_update;
 }

ConfigurableGitTreeUpdate::~ConfigurableGitTreeUpdate() {
              delete this->raw->path;
   }

nodegit::ConfigurableClassWrapper<GitTreeUpdateTraits>::v8ConversionResult ConfigurableGitTreeUpdate::fromJavascript(nodegit::Context *nodegitContext, v8::Local<v8::Value> input) {
  if (!input->IsObject()) {
    return {
      "Must pass object for ConfigurableGitTreeUpdate"
    };
  }

  Nan::HandleScope scope;
  v8::Local<v8::Object> inputObj = input.As<v8::Object>();
  std::shared_ptr<ConfigurableGitTreeUpdate> output(new ConfigurableGitTreeUpdate(nodegitContext));

  // unpack the data into the correct fields
         {
          v8::Local<v8::Value> maybeNumber = nodegit::safeGetField(inputObj, "action");
          if (!maybeNumber.IsEmpty() && !maybeNumber->IsUndefined() && !maybeNumber->IsNull()) {
            if (!maybeNumber->IsNumber()) {
              return {
                "Must pass Int32 to action"
              };
            }

            output->raw->action = static_cast<git_tree_update_t>(maybeNumber->Int32Value(Nan::GetCurrentContext()).FromJust());
          }
        }
            {
            v8::Local<v8::Value> maybeOid = nodegit::safeGetField(inputObj, "id");
            if (!maybeOid.IsEmpty() && !maybeOid->IsUndefined() && !maybeOid->IsNull()) {
              if (maybeOid->IsString()) {
                Nan::Utf8String oidString(maybeOid.As<v8::String>());
                if (git_oid_fromstr(&output->raw->id, *oidString) != GIT_OK) {
                  return {
                    git_error_last()->message
                  };
                }
              } else if (maybeOid->IsObject()) {
                if (git_oid_cpy(&output->raw->id, Nan::ObjectWrap::Unwrap<GitOid>(maybeOid.As<v8::Object>())->GetValue()) != GIT_OK) {
                  return {
                    git_error_last()->message
                  };
                }
              } else {
                return {
                  "Must pass String or NodeGit.Oid to id"
                };
              }
            }
          }
            {
          v8::Local<v8::Value> maybeNumber = nodegit::safeGetField(inputObj, "filemode");
          if (!maybeNumber.IsEmpty() && !maybeNumber->IsUndefined() && !maybeNumber->IsNull()) {
            if (!maybeNumber->IsNumber()) {
              return {
                "Must pass Int32 to filemode"
              };
            }

            output->raw->filemode = static_cast<git_filemode_t>(maybeNumber->Int32Value(Nan::GetCurrentContext()).FromJust());
          }
        }
          output->raw->path = nullptr;
        {
          v8::Local<v8::Value> maybeString = nodegit::safeGetField(inputObj, "path");
          if (!maybeString.IsEmpty() && !maybeString->IsUndefined() && !maybeString->IsNull()) {
            if (!maybeString->IsString()) {
              return {
                "Must pass string to path"
              };
            }

            Nan::Utf8String utf8String(maybeString.As<v8::String>());
            output->raw->path = strdup(*utf8String);
          }
        }
    
  return {
    output
  };
}

         
// force base class template instantiation, to make sure we get all the
// methods, statics, etc.
template class nodegit::ConfigurableClassWrapper<GitTreeUpdateTraits>;
