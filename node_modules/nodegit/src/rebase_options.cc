// This is a generated file, modify: generate/templates/templates/struct_content.cc

// generated from struct_content.cc
#include <nan.h>
#include <string.h>
#ifdef WIN32
#include <windows.h>
#else
#include <unistd.h>
#endif // win32

extern "C" {
  #include <git2.h>
 }

#include <iostream>
#include "../include/nodegit.h"
#include "../include/lock_master.h"
#include "../include/functions/copy.h"
#include "../include/rebase_options.h"
#include "nodegit_wrapper.cc"

  #include "../include/merge_options.h"
  #include "../include/checkout_options.h"
  #include "../include/oid.h"
  #include "../include/signature.h"
  #include "../include/tree.h"
 
using namespace v8;
using namespace node;
using namespace std;

 
ConfigurableGitRebaseOptions::ConfigurableGitRebaseOptions(nodegit::Context *nodegitContext)
  : nodegit::ConfigurableClassWrapper<GitRebaseOptionsTraits>(nodegitContext)
{
     git_rebase_options  wrappedValue = GIT_REBASE_OPTIONS_INIT;
    this->raw = (git_rebase_options*) malloc(sizeof(git_rebase_options ));
    memcpy(this->raw, &wrappedValue, sizeof(git_rebase_options ));
 }

ConfigurableGitRebaseOptions::~ConfigurableGitRebaseOptions() {
              delete this->raw->rewrite_notes_ref;
           }

nodegit::ConfigurableClassWrapper<GitRebaseOptionsTraits>::v8ConversionResult ConfigurableGitRebaseOptions::fromJavascript(nodegit::Context *nodegitContext, v8::Local<v8::Value> input) {
  if (!input->IsObject()) {
    return {
      "Must pass object for ConfigurableGitRebaseOptions"
    };
  }

  Nan::HandleScope scope;
  v8::Local<v8::Object> inputObj = input.As<v8::Object>();
  std::shared_ptr<ConfigurableGitRebaseOptions> output(new ConfigurableGitRebaseOptions(nodegitContext));

  // unpack the data into the correct fields
         {
          v8::Local<v8::Value> maybeNumber = nodegit::safeGetField(inputObj, "version");
          if (!maybeNumber.IsEmpty() && !maybeNumber->IsUndefined() && !maybeNumber->IsNull()) {
            if (!maybeNumber->IsNumber()) {
              return {
                "Must pass Int32 to version"
              };
            }

            output->raw->version = static_cast<unsigned int>(maybeNumber->Int32Value(Nan::GetCurrentContext()).FromJust());
          }
        }
           {
          v8::Local<v8::Value> maybeNumber = nodegit::safeGetField(inputObj, "quiet");
          if (!maybeNumber.IsEmpty() && !maybeNumber->IsUndefined() && !maybeNumber->IsNull()) {
            if (!maybeNumber->IsNumber()) {
              return {
                "Must pass Int32 to quiet"
              };
            }

            output->raw->quiet = static_cast<int>(maybeNumber->Int32Value(Nan::GetCurrentContext()).FromJust());
          }
        }
           {
          v8::Local<v8::Value> maybeNumber = nodegit::safeGetField(inputObj, "inmemory");
          if (!maybeNumber.IsEmpty() && !maybeNumber->IsUndefined() && !maybeNumber->IsNull()) {
            if (!maybeNumber->IsNumber()) {
              return {
                "Must pass Int32 to inmemory"
              };
            }

            output->raw->inmemory = static_cast<int>(maybeNumber->Int32Value(Nan::GetCurrentContext()).FromJust());
          }
        }
          output->raw->rewrite_notes_ref = nullptr;
        {
          v8::Local<v8::Value> maybeString = nodegit::safeGetField(inputObj, "rewriteNotesRef");
          if (!maybeString.IsEmpty() && !maybeString->IsUndefined() && !maybeString->IsNull()) {
            if (!maybeString->IsString()) {
              return {
                "Must pass string to rewriteNotesRef"
              };
            }

            Nan::Utf8String utf8String(maybeString.As<v8::String>());
            output->raw->rewrite_notes_ref = strdup(*utf8String);
          }
        }
          {
          v8::Local<v8::Value> maybeNestedObject = nodegit::safeGetField(inputObj, "mergeOptions");
          if (!maybeNestedObject.IsEmpty() && !maybeNestedObject->IsUndefined() && !maybeNestedObject->IsNull()) {
            auto conversionResult = ConfigurableGitMergeOptions::fromJavascript(nodegitContext, maybeNestedObject);
            if (!conversionResult.result) {
              std::string error = "Failed to set mergeOptions: ";
              error += conversionResult.error;
              return {
                error
              };
            }

            auto child = conversionResult.result;
            output->childCleanupVector.push_back(child);
            output->raw->merge_options = *child->GetValue();
          }
        }
          {
          v8::Local<v8::Value> maybeNestedObject = nodegit::safeGetField(inputObj, "checkoutOptions");
          if (!maybeNestedObject.IsEmpty() && !maybeNestedObject->IsUndefined() && !maybeNestedObject->IsNull()) {
            auto conversionResult = ConfigurableGitCheckoutOptions::fromJavascript(nodegitContext, maybeNestedObject);
            if (!conversionResult.result) {
              std::string error = "Failed to set checkoutOptions: ";
              error += conversionResult.error;
              return {
                error
              };
            }

            auto child = conversionResult.result;
            output->childCleanupVector.push_back(child);
            output->raw->checkout_options = *child->GetValue();
          }
        }
          {
          v8::Local<v8::Value> maybeCallback = nodegit::safeGetField(inputObj, "commitCreateCb");
          if (!maybeCallback.IsEmpty() && !maybeCallback->IsUndefined() && !maybeCallback->IsNull()) {
            if (!maybeCallback->IsFunction() && !maybeCallback->IsObject()) {
              return {
                "Must pass Function or CallbackSpecifier to commitCreateCb"
              };
            }

            std::unique_ptr<Nan::Callback> callback;
            uint32_t throttle =  0 ;
            bool waitForResult = true;

            if (maybeCallback->IsFunction()) {
              callback.reset(new Nan::Callback(maybeCallback.As<v8::Function>()));
            } else {
              v8::Local<v8::Object> callbackSpecifier = maybeCallback.As<v8::Object>();
              v8::Local<v8::Value> maybeCallback = nodegit::safeGetField(callbackSpecifier, "callback");
              if (maybeCallback.IsEmpty() || !maybeCallback->IsFunction()) {
                return {
                  "Must pass callback to CallbackSpecifier"
                };
              }

              callback.reset(new Nan::Callback(maybeCallback.As<v8::Function>()));

              v8::Local<v8::Value> maybeThrottle = nodegit::safeGetField(callbackSpecifier, "throttle");
              if (!maybeThrottle.IsEmpty() && !maybeThrottle->IsUndefined() && !maybeThrottle->IsNull()) {
                if (!maybeThrottle->IsNumber()) {
                  return {
                    "Must pass zero or positive number as throttle to CallbackSpecifier"
                  };
                }

                throttle = maybeThrottle->Uint32Value(Nan::GetCurrentContext()).FromJust();
              }

              v8::Local<v8::Value> maybeWaitForResult = nodegit::safeGetField(callbackSpecifier, "waitForResult");
              if (!maybeWaitForResult.IsEmpty() && !maybeWaitForResult->IsUndefined() && !maybeWaitForResult->IsNull()) {
                if (!maybeWaitForResult->IsBoolean()) {
                  return {
                    "Must pass a boolean as waitForResult to callbackSpecifier"
                  };
                }

                waitForResult = Nan::To<bool>(maybeWaitForResult).FromJust();
              }
            }

            output->commitCreateCb.SetCallback(std::move(callback), throttle, waitForResult);
            output->raw->commit_create_cb = (git_commit_create_cb)commitCreateCb_cppCallback;
          }
        }
          output->raw->payload = (void *)output.get();
    
  return {
    output
  };
}

                  ConfigurableGitRebaseOptions* ConfigurableGitRebaseOptions::commitCreateCb_getInstanceFromBaton(CommitCreateCbBaton* baton) {
           return static_cast<ConfigurableGitRebaseOptions*>(baton->
                      payload
  );
       }

      int ConfigurableGitRebaseOptions::commitCreateCb_cppCallback (
          git_oid * out,           const git_signature * author,           const git_signature * committer,           const char * message_encoding,           const char * message,           const git_tree * tree,           size_t parent_count,           const git_oid ** parents,           void * payload        ) {
        CommitCreateCbBaton *baton =
          new CommitCreateCbBaton(-30);

          baton->out = out;
          baton->author = author;
          baton->committer = committer;
          baton->message_encoding = message_encoding;
          baton->message = message;
          baton->tree = tree;
          baton->parent_count = parent_count;
          baton->parents = parents;
          baton->payload = payload;
 
        ConfigurableGitRebaseOptions* instance = commitCreateCb_getInstanceFromBaton(baton);

           int result;

          if (instance->nodegitContext != nodegit::ThreadPool::GetCurrentContext()) {
            result = baton->defaultResult;
            delete baton;
          } else if (instance->commitCreateCb.WillBeThrottled()) {
            result = baton->defaultResult;
            delete baton;
          } else if (instance->commitCreateCb.ShouldWaitForResult()) {
            result = baton->ExecuteAsync(commitCreateCb_async, commitCreateCb_cancelAsync);
            delete baton;
          } else {
            result = baton->defaultResult;
            baton->ExecuteAsync(commitCreateCb_async, commitCreateCb_cancelAsync, nodegit::deleteBaton);
          }
          return result;
       }

      void ConfigurableGitRebaseOptions::commitCreateCb_cancelAsync(void *untypedBaton) {
        CommitCreateCbBaton* baton = static_cast<CommitCreateCbBaton*>(untypedBaton);
          baton->result = -1;
         baton->Done();
      }

      void ConfigurableGitRebaseOptions::commitCreateCb_async(void *untypedBaton) {
        Nan::HandleScope scope;

        CommitCreateCbBaton* baton = static_cast<CommitCreateCbBaton*>(untypedBaton);
        ConfigurableGitRebaseOptions* instance = commitCreateCb_getInstanceFromBaton(baton);

        if (instance->commitCreateCb.GetCallback()->IsEmpty()) {
            baton->result = baton->defaultResult; // no results acquired
           baton->Done();
          return;
        }

                v8::Local<v8::Array> _parents_array = Nan::New<v8::Array>(baton->parent_count);
          for(uint32_t i = 0; i < _parents_array->Length(); i++) {
            Nan::Set(_parents_array, i, GitOid::New(baton->parents[i], false));
          }
             v8::Local<v8::Value> argv[7] = {
               GitSignature::New(baton->author, false)
 ,               GitSignature::New(baton->committer, false)
 ,               baton->message_encoding == NULL
                ? Nan::EmptyString()
                : Nan::New( baton->message_encoding).ToLocalChecked()
 ,               baton->message == NULL
                ? Nan::EmptyString()
                : Nan::New( baton->message).ToLocalChecked()
 ,               GitTree::New(baton->tree, false)
 ,               // HACK: NAN should really have an overload for Nan::New to support size_t
              Nan::New((unsigned int)baton->parent_count)
 ,               _parents_array
            };
 
        Nan::TryCatch tryCatch;

        Nan::MaybeLocal<v8::Value> maybeResult = (*(instance->commitCreateCb.GetCallback()))(
          baton->GetAsyncResource(),
          7,
          argv
        );
        v8::Local<v8::Value> result;
        if (!maybeResult.IsEmpty()) {
          result = maybeResult.ToLocalChecked();
        }

        if (PromiseCompletion::ForwardIfPromise(result, baton, ConfigurableGitRebaseOptions::commitCreateCb_promiseCompleted)) {
          return;
        }

             if (result.IsEmpty() || result->IsNativeError()) {
              baton->result = -1;
            }
            else if (!result->IsNull() && !result->IsUndefined()) {
                GitOid* wrapper = Nan::ObjectWrap::Unwrap<GitOid>(Nan::To<v8::Object>(result).ToLocalChecked());
                wrapper->selfFreeing = false;

                  git_oid_cpy(baton->out, wrapper->GetValue());
                 baton->result = 0;
             }
            else {
              baton->result = baton->defaultResult;
            }
           baton->Done();
       }

      void ConfigurableGitRebaseOptions::commitCreateCb_promiseCompleted(bool isFulfilled, nodegit::AsyncBaton *_baton, v8::Local<v8::Value> result) {
        Nan::HandleScope scope;

        CommitCreateCbBaton* baton = static_cast<CommitCreateCbBaton*>(_baton);
           if (isFulfilled) {
              if (result.IsEmpty() || result->IsNativeError()) {
                baton->result = -1;
              }
              else if (!result->IsNull() && !result->IsUndefined()) {
                  GitOid* wrapper = Nan::ObjectWrap::Unwrap<GitOid>(Nan::To<v8::Object>(result).ToLocalChecked());
                  wrapper->selfFreeing = false;

                    git_oid_cpy(baton->out, wrapper->GetValue());
                   baton->result = 0;
               }
              else {
                baton->result = baton->defaultResult;
              }
           }
          else {
            // promise was rejected
               ConfigurableGitRebaseOptions* instance = static_cast<ConfigurableGitRebaseOptions*>(baton->        payload  );
             baton->SetCallbackError(result);
            baton->result = -1;
          }
          baton->Done();
       }
     
// force base class template instantiation, to make sure we get all the
// methods, statics, etc.
template class nodegit::ConfigurableClassWrapper<GitRebaseOptionsTraits>;
