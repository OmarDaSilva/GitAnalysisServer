// This is a generated file, modify: generate/templates/templates/struct_header.h

// generated from struct_header.h
#ifndef GITCLONEOPTIONS_H
#define GITCLONEOPTIONS_H
#include <nan.h>
#include <string>
#include <utility>

#include "async_baton.h"
#include "async_worker.h"
#include "callback_wrapper.h"
#include "context.h"
#include "reference_counter.h"
#include "nodegit_wrapper.h"
#include "configurable_class_wrapper.h"
#include "v8_helpers.h"

extern "C" {
  #include <git2.h>
 }

  #include "../include/checkout_options.h"
  #include "../include/fetch_options.h"
 
using namespace node;
using namespace v8;

class GitCloneOptions;
class ConfigurableGitCloneOptions;
 
struct GitCloneOptionsTraits {
  typedef GitCloneOptions cppClass;
  typedef git_clone_options cType;
  typedef ConfigurableGitCloneOptions configurableCppClass;
 
  static const bool isDuplicable = false;
  static void duplicate(git_clone_options **dest, git_clone_options *src) {
     Nan::ThrowError("duplicate called on GitCloneOptions which cannot be duplicated");
   }

  static std::string className() { return "GitCloneOptions"; };
  static const bool isSingleton = false;
  static const bool isFreeable = true;
  static void free(git_clone_options *raw) {
    unsigned long referenceCount = 0;
     if (referenceCount == 0) {
      ::free(raw); // :: to avoid calling this free recursively
    }
   }
};
  
class ConfigurableGitCloneOptions : public nodegit::ConfigurableClassWrapper<GitCloneOptionsTraits> {
  friend class nodegit::ConfigurableClassWrapper<GitCloneOptionsTraits>;

public:
  static v8ConversionResult fromJavascript(nodegit::Context *nodegitContext, v8::Local<v8::Value> input);
  ~ConfigurableGitCloneOptions();

  ConfigurableGitCloneOptions(const ConfigurableGitCloneOptions &) = delete;
  ConfigurableGitCloneOptions(ConfigurableGitCloneOptions &&) = delete;
  ConfigurableGitCloneOptions &operator=(const ConfigurableGitCloneOptions &) = delete;
  ConfigurableGitCloneOptions &operator=(ConfigurableGitCloneOptions &&) = delete;

                 
private:
  ConfigurableGitCloneOptions(nodegit::Context *nodegitContext);
  ConfigurableGitCloneOptions() = delete;
  Nan::Global<Value> promiseError;

                        
};

#endif
