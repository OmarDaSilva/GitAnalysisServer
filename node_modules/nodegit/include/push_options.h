// This is a generated file, modify: generate/templates/templates/struct_header.h

// generated from struct_header.h
#ifndef GITPUSHOPTIONS_H
#define GITPUSHOPTIONS_H
#include <nan.h>
#include <string>
#include <utility>

#include "async_baton.h"
#include "async_worker.h"
#include "callback_wrapper.h"
#include "context.h"
#include "reference_counter.h"
#include "nodegit_wrapper.h"
#include "configurable_class_wrapper.h"
#include "v8_helpers.h"

extern "C" {
  #include <git2.h>
 }

  #include "../include/str_array_converter.h"
  #include "../include/remote_callbacks.h"
  #include "../include/proxy_options.h"
  #include "../include/strarray.h"
 
using namespace node;
using namespace v8;

class GitPushOptions;
class ConfigurableGitPushOptions;
 
struct GitPushOptionsTraits {
  typedef GitPushOptions cppClass;
  typedef git_push_options cType;
  typedef ConfigurableGitPushOptions configurableCppClass;
 
  static const bool isDuplicable = false;
  static void duplicate(git_push_options **dest, git_push_options *src) {
     Nan::ThrowError("duplicate called on GitPushOptions which cannot be duplicated");
   }

  static std::string className() { return "GitPushOptions"; };
  static const bool isSingleton = false;
  static const bool isFreeable = true;
  static void free(git_push_options *raw) {
    unsigned long referenceCount = 0;
     if (referenceCount == 0) {
      ::free(raw); // :: to avoid calling this free recursively
    }
   }
};
  
class ConfigurableGitPushOptions : public nodegit::ConfigurableClassWrapper<GitPushOptionsTraits> {
  friend class nodegit::ConfigurableClassWrapper<GitPushOptionsTraits>;

public:
  static v8ConversionResult fromJavascript(nodegit::Context *nodegitContext, v8::Local<v8::Value> input);
  ~ConfigurableGitPushOptions();

  ConfigurableGitPushOptions(const ConfigurableGitPushOptions &) = delete;
  ConfigurableGitPushOptions(ConfigurableGitPushOptions &&) = delete;
  ConfigurableGitPushOptions &operator=(const ConfigurableGitPushOptions &) = delete;
  ConfigurableGitPushOptions &operator=(ConfigurableGitPushOptions &&) = delete;

           
private:
  ConfigurableGitPushOptions(nodegit::Context *nodegitContext);
  ConfigurableGitPushOptions() = delete;
  Nan::Global<Value> promiseError;

                 
};

#endif
